#!/bin/bash
################################################################################
# SYSTEM
###############################################################################
alias sl='ls'
alias s='ls'
alias ll='ls -alrh'
alias grep='grep --color=auto'
alias watch='watch -d -n 1'
alias ssh='ssh -A'
alias less='less -R'

alias vim='vim -p'
alias path='echo $PATH | tr ":" "\n"'
alias stamp='date +%y%m%d_%H%M'

alias ping8s='ping 8.8.8.8'

if [ $(which exa) ]; then
  alias ls='exa'
fi

if [ $(which bat) ]; then
  alias cat='bat'
fi

if [ $(which prettyping) ]; then
  alias ping='prettyping'
fi

if [ $(which terraform) ]; then
  alias tf='terraform'
fi

if [ $(which pg_ctl) ]; then
  alias pg_ctl='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log'
fi

if [ $(which figlet) ]; then
  alias fml='figlet -c FUCK  && figlet -c MY  && figlet -c LIFE'
else
  alias fml='---- figlet not install: fml ----'
fi

if [ $(which hub > /dev/null) ]; then
  alias pr='hub pull-request'
fi

function f(){
  find . -iname "*$@*"
}


function mark() {
  for i in `seq 5`; do
    printf "\e[1;104m%-`tput cols`s\e[m"
  done
}

function trim() {
  echo "$@ "| sed 's/^[ \t\n]*//' | sed 's/[ \t\n]*$//'
}

function abs() {
  for f in $@; do
    (cd `dirname $f`; echo `pwd`/`basename $f`)
  done
}

function forget_host(){
  [ $# -gt 0 ] || { echo "forget_host <ip> [<ip>]"; return 1; }

  for ip in $@; do
    ssh-keygen -R $ip
  done
}

function learn_host(){
  [ $# -gt 0 ] || { echo "learn_host <hostname> [<hostname || ip>]"; return 1; }

  known_hosts="$HOME/.ssh/known_hosts"
  for ip in $@; do
    echo -n "learning $ip...."
    grep "^$ip " $known_hosts > /dev/null
    if [ $? -eq 0 ]; then
      echo "already know about $ip - skipping"
    else
      ssh-keyscan $ip >> $known_hosts
    fi
  done
}

function delete_ssh_key() {
  [ $# -eq 1 ] || { echo "delete_ssh_key <line number>"; return 1; }
  sed -i .bk "$1d" $HOME/.ssh/known_hosts
}

function scratch() {
  mkdir -p "$HOME/scratchfiles"
  name=$(date +%y%m%d_%H%M)
  if [ $# -eq 1 ]; then
    name=$(echo $1 | sed 's/ /_/g')
  fi
  vim "$HOME/scratchfiles/$name"
  if [ $? -eq 0 ]; then
    echo "scratch file at: $HOME/scratchfiles/$name"
  fi
}

###############################################################################
# BINDINGS
###############################################################################
#bind '\C-l:forward-word'
#bind '\C-h:backward-word'


###############################################################################
# TMUX
###############################################################################
alias tl='tmux list-sessions'

fixssh() {
  for key in SSH_AUTH_SOCK SSH_CONNECTION SSH_CLIENT; do
    if (tmux show-environment | grep "^${key}" > /dev/null); then
      value=`tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//"`
      export ${key}="${value}"
    fi
  done
}
alias fs='fixssh'

function ta() {
  sessions=$(tmux list-sessions | grep -v attached)
  if [ "$sessions" == "" ]; then
    echo "There are no unattached sessions!"
    return 1
  fi

  sess_id=`echo $sessions | head -n 1 | cut -d ':' -f 1`
  echo $sessions
  echo $sess_id

  if [ $# -eq 0 ]; then
    tmux attach-session -t $sess_id
  else
    tmux attach-session $@
  fi
}


###############################################################################
# PYTHON
###############################################################################
if [ -e '~/.pythonrc.py' ]; then
  export PYTHONSTARTUP=~/.pythonrc.py
fi
#
#function activate() {
#  dir='.'
#  if [ $# -eq 1 ]; then
#    dir="$1"
#  fi
#  activate_script=`find "$dir" -name "activate"`
#  [ -e "$activate_script" ] || { echo "Failed to find a virtual env under '$dir'"; return 1; }
#  source "$activate_script"
#}
#
#function venv() {
#  venv_name="$1"
#  if [ "$1" == "--" ] || [ $# -eq 0 ]; then
#    venv_name="venv-`basename $(pwd)`"
#  fi
#
#  if [ $# -eq 2 ]; then
#    case "$2" in
#      'py27')
#        which_python='/usr/bin/python2.7';;
#      'py33')
#        which_python='/usr/bin/python3.3';;
#      'py34')
#        which_python='/usr/bin/python3.4';;
#      'py35')
#        which_python='/usr/local/bin/python3.5';;
#      *)
#        echo "no python $2"
#        return 1
#        ;;
#    esac
#    virtualenv -p $which_python $venv_name
#  else
#    virtualenv $venv_name
#  fi
#  echo "built virtual env: $venv_name"
#  source $venv_name/bin/activate
#  if [ -e 'requirements.txt' ]; then
#    echo "found requirements file - installing it into $venv_name"
#    pip install -r requirements.txt
#  elif [ -e 'setup.py' ]; then
#    pip install -e .
#  fi
#}

function concat() {
  local IFS="$1"
  shift
  echo "$*"
}

###############################################################################
# GO
###############################################################################
alias gobuild='go build $(go list ./... | grep -v vendor)'

###############################################################################
# GIT
###############################################################################
alias gitamend='git commit --amend'
alias grv='git remote -v'
alias gst='git status'
alias gba='git branch -a'
alias gbc='git branch -d $(git branch -a | grep -v "*" | grep -v remotes)'
alias gc-='git checkout -'
alias gco='git checkout'
alias gcm='git checkout master'
alias gcom='git commit -S -s'
alias gpr='git pull --rebase'
alias gpp='git pull --prune'
alias gitignore='vim .gitignore'
alias glog='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --color=always'

git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.last 'log -1 HEAD'
git config --global alias.nb 'checkout -b'
git config --global alias.unstage 'reset HEAD --'


function parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}


###############################################################################
# DOCKER
###############################################################################
function docker-connect() {

  if [ $# -eq 0 ]; then
    daemon_name="default"
  else
    daemon_name=$1
  fi

  eval $(docker-machine env $daemon_name)
}

###############################################################################
# HISTORY
###############################################################################
shopt -s cmdhist
HISTCONTROL=ignoreboth
HISTSIZE=10000
HISTIGNORE="&:ls:[bf]g:exit:pwd:clear:fs:sharedrc:vimrc:gst:glog"

###############################################################################
# PATH
###############################################################################
PATH=$PATH:/usr/local/sbin

